//Deque Using Linked List
#include<stdio.h>
#include<stdlib.h>
struct Node{
	int data;
	struct Node *next;
	struct Node *prev;
};
struct Node*front=NULL;
struct Node*rear = NULL;
void EnqueueR(int item){
	 struct Node *newNode=(struct Node*) malloc(sizeof(struct Node));
	 newNode->data=item;
	 newNode->next=NULL;
	      	 newNode->prev=NULL;
	if(front==NULL){
		front=rear=newNode;
	}
	else{
		rear->next=newNode;
		newNode->prev=rear;
		rear=newNode;
		}
}
void EnqueueF(int item){
		 struct Node *newNode=(struct Node*) malloc(sizeof(struct Node));
		 newNode->data=item;
		if(front==NULL){
		newNode->next=NULL;
	      	newNode->prev=NULL;
		front=rear=newNode;
		}
		else{
			front->prev=newNode;
			newNode->next= front;
			front=newNode;
		}
	}
void DequeueF(){
	if(front==NULL){
		printf("Deque is empty");
	}
	else{
	struct Node *temp=front;
		front=front->next;
		front->prev=NULL;
		free(temp);
	}
}
void DequeueR(){
	if(rear==NULL){
		printf("Deque is empty\n");
	}
	else{
		struct Node*temp=rear;
		if(rear->prev!=NULL){
			rear=rear->prev;
			rear->next=NULL;
		}else
		{
		
			front=rear=NULL;
		}
		free(temp);
}
}
void Display(){
{
	if(front==NULL)
	{
		printf("queue empty\n");
	}
	else
	{
		struct Node *temp=front;
		printf("queue element:\n");
		while(temp!=NULL)
		{
			printf("%d\n",temp->data);
	  		temp=temp->next;
	  	}
	  	printf("\n");
	  }
}
}

void main(){
	int ch,data;
	printf("\nDouble Ended Queue using Linked List\n");
	printf("1.Enqueue at Front\n");
	printf("2.Enqueue at Rear\n");
	printf("3.Dequeue at Front\n");
	printf("4.Dequeue at Front\n");
	printf("5.Display\n");
	printf("5.Exit\n");
	do{
	printf("Enter your choice\n");
	scanf("%d",&ch);
	switch(ch){
		case 1:
			printf("Enter the data\n");
			scanf("%d",&data);
			EnqueueF(data);
			break;
		case 2:
			printf("Enter the data\n");
			scanf("%d",&data);
			EnqueueR(data);
			break;
		case 3:
			DequeueF();
			break;
		case 4:
			DequeueR();
			break;
		case 5:
			Display();
			break;
		case 6:
			printf("Exiting....");
			exit(0);
		}
	}while(ch<7);
	}
